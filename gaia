#!/usr/bin/env node

/**
 * GaiaScript CLI - Minimal command line tool for GaiaScript
 * 
 * Uses the ultra-compact pkg.gaia format and invokes the universal compiler
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const os = require('os');

// Parse arguments
const args = process.argv.slice(2);
const command = args[0] || 'help';
const inputFile = args[1];
const options = parseOptions(args.slice(2));

/**
 * Parse command line options
 */
function parseOptions(args) {
  const options = {};
  for (const arg of args) {
    if (arg.startsWith('--')) {
      const [key, value] = arg.substring(2).split('=');
      options[key] = value || true;
    }
  }
  return options;
}

/**
 * Load GaiaScript package
 */
function loadPackage() {
  // First, check if pkg.gaia exists
  const pkgPath = path.join(__dirname, 'pkg.gaia');
  
  if (!fs.existsSync(pkgPath)) {
    console.error('Error: pkg.gaia not found');
    process.exit(1);
  }
  
  // Load package
  const pkgContent = fs.readFileSync(pkgPath, 'utf-8');
  
  // Validate package
  if (!pkgContent.startsWith('ℙ⟨')) {
    console.error('Error: Invalid package format');
    process.exit(1);
  }
  
  // Extract runtime
  const runtimeMatch = pkgContent.match(/⚙⟨([\s\S]+?)⟩/);
  
  if (!runtimeMatch) {
    console.error('Error: Invalid package (missing runtime)');
    process.exit(1);
  }
  
  // Create runtime file
  const runtimePath = path.join(os.tmpdir(), `.gaia-runtime-${Date.now()}.js`);
  fs.writeFileSync(runtimePath, runtimeMatch[1]);
  
  // Load runtime
  const runtime = require(runtimePath);
  
  // Clean up
  try {
    fs.unlinkSync(runtimePath);
  } catch (err) {}
  
  return runtime;
}

/**
 * Ensure the comp directory exists
 * Extracts it from the package if necessary
 */
function ensureCompDir() {
  const compDir = path.join(__dirname, 'comp');
  
  if (!fs.existsSync(compDir)) {
    console.log('Extracting compiler from package...');
    const runtime = loadPackage();
    
    // Extract to a temp directory first
    const tempDir = path.join(os.tmpdir(), `gaiascript-${Date.now()}`);
    runtime.extract(path.join(__dirname, 'pkg.gaia'), tempDir);
    
    // Copy the comp directory
    fs.mkdirSync(compDir, { recursive: true });
    copyDirectory(path.join(tempDir, 'comp'), compDir);
    
    // Clean up
    try {
      fs.rmSync(tempDir, { recursive: true, force: true });
    } catch (err) {}
  }
  
  return compDir;
}

/**
 * Copy a directory recursively
 */
function copyDirectory(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      copyDirectory(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

/**
 * Run command
 */
async function runCommand() {
  switch (command) {
    case 'run':
      if (!inputFile) {
        console.error('Error: Input file required');
        showHelp();
        process.exit(1);
      }
      
      // Ensure compiler is available
      ensureCompDir();
      
      // Compile GaiaScript
      const buildResult = compileGaiaScript(inputFile, options);
      
      if (buildResult && options.execute !== false) {
        // Execute compiled JavaScript
        const outputPath = options.output || path.join(process.cwd(), 'build', 'gaia-compiled.js');
        console.log(`Executing ${outputPath}...`);
        
        try {
          execSync(`node ${outputPath}`, { stdio: 'inherit' });
        } catch (error) {
          console.error(`Execution error: ${error.message}`);
          process.exit(1);
        }
      }
      break;
      
    case 'build':
      if (!inputFile) {
        console.error('Error: Input file required');
        showHelp();
        process.exit(1);
      }
      
      // Ensure compiler is available
      ensureCompDir();
      
      // Compile GaiaScript
      compileGaiaScript(inputFile, { ...options, execute: false });
      break;
      
    case 'extract':
      const runtime = loadPackage();
      const extractDir = inputFile || './extracted';
      runtime.extract(path.join(__dirname, 'pkg.gaia'), extractDir);
      break;
      
    case 'help':
    default:
      showHelp();
      break;
  }
}

/**
 * Compile GaiaScript file
 */
function compileGaiaScript(inputFile, options = {}) {
  const compDir = ensureCompDir();
  const buildJs = path.join(compDir, 'build.js');
  
  if (!fs.existsSync(buildJs)) {
    console.error('Error: Compiler not found');
    process.exit(1);
  }
  
  // Prepare command
  let cmd = `node ${buildJs} ${inputFile}`;
  
  // Add options
  if (options.output) {
    cmd += ` --output=${options.output}`;
  }
  
  if (options.platform || options.target) {
    cmd += ` --platform=${options.platform || options.target}`;
  }
  
  // Run compiler
  try {
    console.log(`Running: ${cmd}`);
    execSync(cmd, { stdio: 'inherit' });
    return true;
  } catch (error) {
    console.error(`Compilation error: ${error.message}`);
    return false;
  }
}

/**
 * Show help
 */
function showHelp() {
  console.log(`
GaiaScript CLI - Ultra-compact symbolic language

Usage:
  ./gaia <command> [options]

Commands:
  run <file>     Build and run GaiaScript file
  build <file>   Build GaiaScript file to JavaScript
  extract [dir]  Extract pkg.gaia to directory
  help           Show this help

Options:
  --output=<file>    Output file (default: build/gaia-compiled.js)
  --target=<target>  Target platform (macos, windows, linux, ios, android, web)

Examples:
  ./gaia run main.gaia
  ./gaia build main.gaia --output=app.js --target=web
  ./gaia extract ./extracted
`);
}

// Run command
runCommand().catch(error => {
  console.error(`Error: ${error.message}`);
  process.exit(1);
});