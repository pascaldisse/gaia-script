"""
GaiaScript Translator - Converts natural language to/from GaiaScript symbolic notation
"""

import re
import json
from typing import Dict, List, Union, Any

class GaiaScriptTranslator:
    """
    Translator for converting between natural language and GaiaScript notation.
    This implements an ultra-compact symbolic language for minimal token usage.
    """
    
    def __init__(self):
        # Symbol mappings for encoding/decoding
        self.query_symbols = {
            "question": "Q",
            "request": "R",
            "definition": "D"
        }
        
        self.data_symbols = {
            "text": "T",
            "number": "N",
            "boolean": "B",
            "list": "L",
            "object": "O"
        }
        
        self.operation_symbols = {
            "concatenate": "⊕",
            "transform": "⊗",
            "flow": "→",
            "function": "λ",
            "for_all": "∀",
            "exists": "∃",
            "member": "∈",
            "subset": "⊆",
            "proper_subset": "⊂"
        }
        
        self.special_symbols = {
            "empty": "ε",
            "complete": "Ω",
            "difference": "δ",
            "sum": "Σ",
            "mean": "μ",
            "stddev": "σ",
            "gradient": "∇",
            "integrate": "∫",
            "format": "ℱ"
        }
        
        # Reverse mappings for decoding
        self.reverse_query_symbols = {v: k for k, v in self.query_symbols.items()}
        self.reverse_data_symbols = {v: k for k, v in self.data_symbols.items()}
        self.reverse_operation_symbols = {v: k for k, v in self.operation_symbols.items()}
        self.reverse_special_symbols = {v: k for k, v in self.special_symbols.items()}
    
    def natural_to_gaia(self, text: str) -> str:
        """Convert natural language text to GaiaScript notation"""
        
        # Basic conversion - wrap text in text container and question
        gaia_script = f"Q⟨T⟨{text}⟩⟩"
        
        # Special pattern detection
        if text.lower().startswith(("write", "generate", "create", "code")):
            # Code generation request
            match = re.search(r"(write|generate|create|code)\s+(.*?)\s+(code|function|program)", text.lower())
            if match:
                lang = match.group(2)
                rest = text.split(match.group(0), 1)[1].strip()
                gaia_script = f"R⟨λ⟨{lang}⟩⊗T⟨{rest}⟩⟩"
        
        elif text.lower().startswith(("summarize", "summarise", "summary")):
            # Summarization request
            content = text.split(None, 1)[1].strip()
            gaia_script = f"R⟨T⟨{content}⟩⊗ℱ⟨Summary⟩⟩"
        
        elif text.lower().startswith(("explain", "describe", "what is")):
            # Explanation request
            topic = re.sub(r"^(explain|describe|what is)\s+", "", text.lower())
            gaia_script = f"Q⟨T⟨{topic}⟩⊗ℱ⟨Explanation⟩⟩"
            
        return gaia_script
    
    def gaia_to_natural(self, gaia_script: str) -> str:
        """Convert GaiaScript notation to natural language text"""
        
        # Extract text content from GaiaScript notation
        text_match = re.search(r"T⟨([^⟩]+)⟩", gaia_script)
        if text_match:
            return text_match.group(1)
        
        # Simple operation content extraction
        for symbol, operation in self.reverse_operation_symbols.items():
            parts = gaia_script.split(symbol, 1)
            if len(parts) > 1:
                return f"{operation} {self.gaia_to_natural(parts[0])} to {self.gaia_to_natural(parts[1])}"
        
        # If no pattern matched, return original
        return gaia_script
    
    def is_gaia_script(self, text: str) -> bool:
        """Check if input is in GaiaScript notation"""
        
        # Check for GaiaScript query indicators
        for symbol in self.query_symbols.values():
            if f"{symbol}⟨" in text:
                return True
        
        # Check for common GaiaScript symbols
        common_symbols = ["→", "⊕", "⊗", "λ", "∀", "∫", "ℱ"]
        for symbol in common_symbols:
            if symbol in text:
                return True
                
        return False
    
    def parse_query(self, gaia_script: str) -> Dict[str, Any]:
        """Parse GaiaScript query into structured form"""
        result = {"type": "unknown", "content": gaia_script}
        
        # Extract query type
        for query_type, symbol in self.query_symbols.items():
            if gaia_script.startswith(f"{symbol}⟨"):
                result["type"] = query_type
                content = gaia_script[2:].rstrip("⟩")
                result["content"] = content
                break
        
        # Extract data type if present
        for data_type, symbol in self.data_symbols.items():
            if result["content"].startswith(f"{symbol}⟨"):
                result["data_type"] = data_type
                content = result["content"][2:].rstrip("⟩")
                result["content"] = content
                break
        
        return result
    
    def format_response(self, response_type: str, content: str, data_type: str = "text") -> str:
        """Format response in GaiaScript notation"""
        response_symbol = self.query_symbols.get("request", "R")  # Default to request type for responses
        data_symbol = self.data_symbols.get(data_type, "T")  # Default to text data type
        
        return f"{response_symbol}⟨{data_symbol}⟨{content}⟩⟩"

# Example usage
if __name__ == "__main__":
    translator = GaiaScriptTranslator()
    
    # Natural language to GaiaScript
    natural = "What is the theory of relativity?"
    gaia = translator.natural_to_gaia(natural)
    print(f"Natural: {natural}")
    print(f"GaiaScript: {gaia}")
    
    # GaiaScript to natural language
    decoded = translator.gaia_to_natural(gaia)
    print(f"Decoded: {decoded}")
    
    # Parse query
    parsed = translator.parse_query(gaia)
    print(f"Parsed: {json.dumps(parsed, indent=2)}")