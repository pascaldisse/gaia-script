# GaiaScript Documentation

## Overview

GaiaScript is an ultra-compact symbolic language designed for minimal token usage in AI-to-AI communication. It uses Unicode symbols extensively to represent complex operations, neural network architectures, and programming constructs in a highly condensed form.

Key features:
- Universal Compiler: Targets JavaScript, WebAssembly, macOS, Windows, Linux, iOS, and Android
- Ultra-compact Representation: Express complex ideas with minimal tokens
- Native ML Support: Built-in neural networks, transformers, GAN architectures
- Component-based Design: Reusable components with symbolic names
- Interactive Tools: Playground and Translator interfaces for learning and development

## Language Syntax

### Basic Elements

GaiaScript uses the following structural elements:
- `⟨...⟩` - Brackets for scope/containers
- `⟪...⟫` - Metadata definition
- `:` - Definition assignment
- `;` - Statement separator
- `.` - Property accessor
- `⊕` - Concatenation operator

### Data Types

- `T⟨...⟩` - Text (natural language)
- `N⟨...⟩` - Number
- `B⟨...⟩` - Boolean (1/0)
- `L⟨...⟩` - List
- `O⟨...⟩` - Object (key-value pairs)
- `λ⟨...⟩` - Function definition

### Query Types

- `Q⟨...⟩` - Question requiring information
- `R⟨...⟩` - Request/command to perform action
- `D⟨...⟩` - Definition/declaration of information

### Operators

Mathematical: `+`, `-`, `×`, `÷`, `^`, `√`, `∑`, `∏`
Logical: `∧`, `∨`, `¬`, `⊻`, `→`, `↔`
Collection: `∈`, `∉`, `⊂`, `⊆`, `∪`, `∩`, `∖`
Flow Control: `→`, `⇒`, `[...×n]`, `(condition)|expr`, `⊳`, `⟿`

### Neural Network Notation

- `N` - Network declaration
- `I` - Input layer
- `S` - Output softmax
- Layers: `C₁` (Convolution), `P` (Pooling), `F` (Flatten), `D₁` (Dense hidden), `D₀` (Dense output), etc.
- Activations: `ρ` (ReLU), `σ` (Sigmoid), `τ` (Tanh), etc.
- Architectures: `G⊕D` (GAN), `E⊕D` (Autoencoder), etc.

## Universal Compiler

The Universal Compiler is a core component of GaiaScript that enables cross-platform compilation from a single source.

### Architecture

The Universal Compiler is implemented in Rust (with a JS bridge) and follows these steps:
1. Parse GaiaScript source code into an AST
2. Detect target platform (or use specified platform)
3. Apply platform-specific compilation rules
4. Generate appropriate output code
5. Create application structure based on target platform

### Core Implementation

The `UniversalCompiler` struct in `universal_compiler.rs` contains:

```rust
pub struct UniversalCompiler {
    platform: Platform,
    force_platform: Option<Platform>,
    output_directory: String,
}
```

Key methods:
- `new()`: Creates a new compiler instance with default configuration
- `set_platform()`: Forces specific target platform
- `set_output_directory()`: Sets the output directory
- `get_target_platform()`: Returns the target platform (forced or detected)
- `compile()`: Main compilation method that orchestrates the process

The compiler uses the following process flow:
1. Read and parse source file into an AST
2. Extract application name from the source filename
3. Determine target platform (user-specified or auto-detected)
4. Call appropriate platform-specific compiler implementation
5. Generate output files in the specified directory structure

### Platform-Specific Compilation

Each supported platform has dedicated compilation methods:
- `compile_for_web()`: Generates JavaScript and HTML
- `compile_for_android()`: Produces Kotlin code
- `compile_for_macos()`: Creates Swift/AppKit applications
- `compile_for_windows()`: Generates C#/.NET code
- `compile_for_linux()`: Produces C/GTK+ applications
- `compile_for_ios()`: Creates Swift/UIKit applications

Currently, Web and Android targets are fully implemented, with others temporarily redirecting to web output.

### Platform Detection

The `platform_detector.rs` module contains platform detection logic:
```rust
pub enum Platform {
    MacOS,
    Windows,
    Linux,
    IOS,
    Android,
    Web,
}

pub fn determine_best_target() -> Platform {
    // Detect operating system and return appropriate platform
    // Default to Web for unknown environments
}
```

### Supported Platforms

- **Web (Default)**: Compiles to JavaScript/HTML
  - Generates a JS file with the compiled code
  - Creates an HTML wrapper with proper references
  - Includes basic styling for the application

- **macOS**: Generates Swift/AppKit applications
  - Creates Swift source files using SwiftUI
  - Maps GaiaScript UI components to SwiftUI views
  - Handles state management and event handling

- **Windows**: Creates C#/.NET applications
  - Generates C# code with WPF for UI
  - Maps GaiaScript components to XAML

- **Linux**: Produces C/GTK+ applications
  - Creates C code with GTK+ bindings
  - Maps GaiaScript UI to GTK+ widgets

- **iOS**: Builds Swift/UIKit applications
  - Similar to macOS but using UIKit
  - Adapts for mobile interaction patterns

- **Android**: Creates Kotlin/Android applications
  - Generates Kotlin code with Android UI components
  - Maps GaiaScript UI to Android Views
  - Handles activity lifecycle and state management

### CLI Interface

The compiler exposes a command-line interface:

```bash
cargo run -- [options] <file.gaia>
```

Options:
- `--platform=PLATFORM` - Force a specific target platform (macos, windows, linux, ios, android, web)
- `--output=DIR` - Specify output directory (default: current directory)
- `--help` - Display help information

The CLI parses arguments, creates a compiler instance, and calls the appropriate methods based on the provided options.

## GaiaScript Package Format

GaiaScript uses a custom package format (pkg.gaia) for distributing applications and components in an ultra-compact format.

### Package Structure

The pkg.gaia file is structured as follows:
- Header: `ℙ⟨`
- Version information: `µ⟨⊹.⋰⟩` (0.3)
- Timestamp: `τ⟨⋮⋰⋮⋱⊹⋮⋱⋰⋱⟩`
- Files section: `ƒ⟨...⟩`
- Individual files: `⚡⟨filename⟩⟨content⟩`
- Utility code: `⚙⟨...⟩`
- Footer: `⟩`

### Technical Analysis of pkg.gaia

The pkg.gaia file represents a highly sophisticated packaging system with multiple layers:

1. **Section Organization**:
   The file follows a hierarchical structure with nested sections:
   - `ℙ⟨...⟩` - Main package container
   - `µ⟨⊹.⋰⟩` - Version metadata (using numeric encoding)
   - `τ⟨⋮⋰⋮⋱⊹⋮⋱⋰⋱⟩` - Timestamp in encoded format
   - `ƒ⟨...⟩` - Files container section

2. **Component Hierarchy**:
   The package contains a hierarchical component structure:
   ```
   N〈υ⊕η⊕Γ⊕μ⊕∂⊕ℝ〉
   ```
   This defines the main network with components:
   - `υ` (Upsilon): UI components
   - `η` (Eta): Neural networks
   - `Γ` (Gamma): Generative models
   - `μ` (Mu): Transformations
   - `∂` (Partial): Differential operations
   - `ℝ` (Real): Number system

3. **Numerical System Definition**:
   The package defines its own numerical encoding system:
   ```
   ℝ〈Þ⊕¢⊕Ħ〉
   Þ:{⊹:0,⊿:1,⋮:2,⋰:3,⋱:4,⌓:5,⌗:6,⊥:7,⊢:8,⊧:9,⋈:10,≡:100,≢:1000,≋:10000,⋕:100000,Ⅰ:-1,Ⅱ:-2,Ⅲ:-3,Ⅳ:-4,Ⅴ:-5,Ⅵ:-6,Ⅶ:-7,Ⅷ:-8,Ⅸ:-9,Ⅹ:-10}
   ```

4. **UI Component System**:
   UI components are defined with nested structure:
   ```
   υ〈§⊕γ⊕δ⊕α〉
   §:Σ→⍚→⚡→Ω
   γ:⟨{ϖ,ϖł,ϱ}⟩→∮⌗≡×⊧≡→П→⊞⋰×⋰→[(⌘"▶"⌘ω→φ.①),(⌘"↺"⌘ω→φ.⓪),(⌑"§"⇄φ.ς)]
   ```
   This creates interactive UI elements with event handlers.

5. **Neural Network Definitions**:
   The package includes multiple neural network architectures:
   ```
   η〈Ñ⊕Ŧ⊕Ğ〉
   Ñ:I⋮≡×⋮≡×⋰→C₁⋰⋮→P→C₂⊧⋱→P→F→D₁⊿⋮⌗→D₂⊧⋱→D₀⊿⊹→S
   ```
   This defines a CNN architecture.

6. **GAN Implementation**:
   The package includes a complete GAN architecture:
   ```
   Ğ〈G⊕D⊕L〉
   G:Z⊿≡→U⋰×⋰×⌓⊿⋮→[U⋮×→C⋮⌓⊧ρ]×⋮→C⋰τ
   D:I→[C⊧⋱⌓ρ→P⋮]×⋰→F→D₁⊿⊹⋮⋱ρ→D₀⊿σ
   L:G(Z)⊳D⟿BCE+λ‖∇D‖
   ```
   This defines a generator (G), discriminator (D), and loss function (L).

7. **Runtime JavaScript**:
   The package contains embedded utility JavaScript in compressed form:
   ```javascript
   ⚙⟨
     w₊₂ fs = w₈₇('fs');
     w₊₂ path = w₈₇('path');
     w₊₂ { execSync, spawnSync } = w₈₇('child_process');
     w₊₂ os = w₈₇('os');
     // ...
   ⟩
   ```
   This provides runtime functionality for platform detection, file handling, and package extraction.

### Technical Features

1. **Symbolic Compression**:
   - Uses GaiaScript word encodings (w₀, w₁, etc.) for common words
   - Employs phrase encodings (s₀, s₁, etc.) for common code patterns
   - Numeric representations using special symbols
   - Component relationships expressed via Unicode operators (⊕, →, etc.)

2. **File Management**:
   - Support for multiple files in a single package
   - Maintains directory structure through file paths
   - Efficient file content storage
   - File-specific metadata handling

3. **Runtime Support**:
   - Built-in extraction functionality
   - Platform detection for appropriate compilation
   - Integrated compiler support
   - Self-contained runtime environment

4. **Integration with Universal Compiler**:
   - Detection of platform target based on runtime environment
   - Automatic extraction and compilation of GaiaScript components
   - Support for all compiler target platforms

### Package Tools (gaiapkg.js)

The gaiapkg.js tool provides CLI utilities for working with .gaiapkg files with these advanced features:

1. **Creation (create)**:
   - Recursively processes directories to include all files
   - Applies multi-layer compression strategies
   - Generates metadata automatically
   - Preserves file relationships and structure

2. **Extraction (extract)**:
   - Unpacks files with automatic directory creation
   - Preserves original file structure
   - Decompresses content through multiple layers
   - Restores original file content exactly

3. **Analysis (list)**:
   - Shows package metadata (version, timestamp)
   - Lists all included files with size analytics
   - Calculates compression ratios for each file
   - Provides summaries of overall package efficiency

4. **Integration (gaia)**:
   - Creates complete GaiaScript distribution package
   - Includes compiler, runtime, and essential components
   - Optimizes package for distribution
   - Ensures completeness of all required components

### Compression Techniques

The package format employs multiple sophisticated layers of compression:

1. **Word Mapping**: 
   - Maps 100+ common programming terms to short word codes
   - Examples: `function` → `w₂₈`, `return` → `w₊₁`, `const` → `w₊₂`
   - Preserves readability while reducing token count
   - Particularly effective for JavaScript and similar languages

2. **Phrase Mapping**:
   - Identifies common code patterns and maps to single tokens
   - Examples: `function() {` → `s₍₁₎`, `return function() {` → `s₍₂₎`
   - Captures repetitive boilerplate code in single tokens
   - Achieves high compression rates for common patterns

3. **Symbolic Operators**:
   - Uses Unicode operators for common operations
   - Examples: `→` for sequencing, `⊕` for concatenation
   - Replaces multi-character operators with single character equivalents
   - Particularly effective for math and flow control

4. **Specialized Numeric Encoding**:
   - Custom single-character representation for numbers
   - Handles base numbers, scientific notation, and special values
   - Includes negative numbers and common constants (π, e, etc.)
   - Reduces multi-digit numbers to single characters where possible

5. **Hierarchical Nesting**:
   - Uses nested brackets to represent hierarchical structures
   - Eliminates redundant delimiters and separators
   - Maintains clear structure despite high compression
   - Allows for deterministic parsing and unpacking

## Token Efficiency

GaiaScript achieves significant token reduction compared to natural language:

| Communication Type | Natural Language (tokens) | GaiaScript (tokens) | Reduction % |
|-------------------|----------------------------|---------------------|-------------|
| Simple query | 12-15 | 5-8 | 45-65% |
| Complex query | 25-40 | 10-15 | 60-75% |
| Data structure | 30-50 | 15-25 | 50-65% |
| Neural network definition | 100-150 | 20-35 | 75-85% |
| Algorithm description | 200-300 | 40-70 | 70-80% |

### Optimization Techniques

1. **Symbolic representations** for mathematical and logical operations
2. **Word encoding** system (w₀, w₁, etc.) for common words
3. **Numeric symbols** (⊹, ⊿, ⋮, etc.) instead of digits
4. **Phrase encodings** (s₀, s₁, etc.) for common expressions
5. **Minimized whitespace** usage
6. **Chained operations** with flow symbols (→, ⇒, etc.)
7. **Nested structures** for hierarchical representation
8. **Contextual shorthand** for clear meaning

## Testing Environment

The GaiaScript testing environment is optimized for:
- AI-to-AI communication
- Evolutionary development
- UI interaction and testing
- Test-driven development (TDD)
- Automated error correction

### Components

1. **GaiaParser**: Fast parsing of GaiaScript notation
2. **GaiaInterpreter**: Code execution
3. **GaiaCompiler**: Multi-target compilation
4. **GaiaMutator**: Code mutation strategies
5. **GaiaUISimulator**: UI rendering and interaction
6. **GaiaTestRunner**: Test execution and reporting
7. **GaiaEvolution**: Genetic algorithm optimization

### Test Types

- **Parser Tests**: Validate syntax parsing
- **Runtime Tests**: Verify code execution
- **Compiler Tests**: Check compilation outputs
- **UI Tests**: Test interface rendering and interaction
- **Mutation Tests**: Evaluate code changes
- **Evolution Tests**: Optimize through genetic algorithms

### Performance Goals

- Parsing: <1ms for simple scripts
- Execution: <100ms for complex networks
- UI checks: <10ms per element
- Evolution: Process 100+ generations per minute