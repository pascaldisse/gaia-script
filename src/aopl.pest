// AOPL Grammar for Pest parser - Extended with UI and 3D Components

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" }

// Symbols
network_decl = { "N" }
grouping_open = { "〈" }
grouping_close = { "〉" }
component_composition = { "⊕" }
block_open = { "[" }
block_close = { "]" }
repetition = { "×" ~ number }

// Input/Output Operations
input_marker = { "⊢" }
text_input = { "T" }
image_input = { "I" }
sequence_input = { "S" }
latent_input = { "Z" }
output_marker = { "↵" }

// Data Flow
data_flow = { "→" | "->" }
feed_output = { "⊳" }
loss_function = { "⟿" }

// Layers and Operations
conv_layer = { "C" ~ subscript? | "C" ~ ASCII_DIGIT }
dense_layer = { "D" ~ subscript? | "D" ~ ASCII_DIGIT }
pooling = { "P" }
flatten = { "F" }
upsampling = { "U" }
lstm = { "L" }
attention_heads = { "H" }
reshape = { "R" }
embedding = { "E" }
batch_size = { "B" }
transpose_conv = { "T" }
attention = { "A" }

// Activation Functions
relu = { "ρ" }
sigmoid = { "σ" }
tanh = { "τ" }
softmax = { "S" }

// Normalization and Regularization
norm_flag = { "⊻" }
param_decl = { "⊸" }
mean_param = { "μ" }
std_param = { "σ" }
regularization = { "R" }

// Special Operators
addition = { "+" }
convolution = { "⊛" }
matrix_mult = { "⊠" }
gradient = { "∇" }
custom_op = { "⇝" }
connect_to = { "⇀" }
preprocessing = { "⍓" }

// Extended UI Components
ui_canvas = { "∮" ~ dimension? }
ui_panel = { "П" }
ui_layout = { "⊞" ~ dimension? }
ui_button = { "⌘" ~ string? }
ui_label = { "⌑" ~ string? }

// Extended Events and Bindings
event_handler = { "⌘" ~ event_type ~ "→" ~ handler_ref }
event_type = { "click" | "hover" | "change" | "input" }
handler_ref = { component_id ~ ("." ~ symbol_ref)* }
symbol_ref = { "①" | "⓪" | "ς" | identifier }
data_binding = { "⇄" ~ (identifier | symbol_ref) ~ ("." ~ (identifier | symbol_ref))* }

// Extended 3D Components
world3d = { "⦿" }
camera = { "⌖" }
renderer = { "⟲" ~ number? }
light = { "☀" }
mesh3d = { "⊿" }
texture = { "⍉" }
material = { "◐" }
shader = { "⌼" }
scene = { "⊛" }
skybox = { "⊠" }

// Basic types
subscript = @{ ASCII_DIGIT }
number = @{ ASCII_DIGIT+ }
dimension = @{ number ~ ("×" ~ number)* }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// Component identifier
component_id = @{ ASCII_ALPHA }

// Layer with params
layer_params = { (number | dimension | relu | sigmoid | tanh | softmax)* }

// Network components
component_def = { component_id ~ ":" ~ extended_network_expr }

// Input specification
input_spec = { 
    input_marker? ~ 
    (text_input | image_input | sequence_input | latent_input) ~ 
    layer_params? 
}

// Layer expression
layer_expr = {
    (
        conv_layer | dense_layer | pooling | flatten | upsampling | 
        lstm | attention_heads | reshape | embedding | batch_size | 
        transpose_conv | attention
    ) ~ layer_params?
}

// UI expression
ui_expr = {
    ui_canvas | ui_panel | ui_layout | ui_button | ui_label
}

// 3D expression
threed_expr = {
    world3d | camera | renderer | light | mesh3d | texture | material | shader | scene | skybox
}

// Block expression
block_expr = { 
    block_open ~ 
    extended_network_expr ~ 
    block_close ~ 
    repetition?
}

// Component reference
component_ref = { component_id ~ ("(" ~ extended_network_expr ~ ")")? }

// Loss expression
loss_expr = { extended_network_expr ~ feed_output ~ component_id ~ loss_function ~ (ASCII_ALPHA | ASCII_DIGIT | special_char)+ }
special_char = { "+" | "-" | "*" | "/" | "=" | "<" | ">" | "|" | "\\" | ":" | ";" | "," | "." | "!" | "?" | "'" | "\"" | "`" | "~" | "@" | "#" | "$" | "%" | "^" | "&" | "_" }

// Network with components
network_components = { 
    grouping_open ~ 
    component_id ~ (component_composition ~ component_id)* ~ 
    grouping_close
}

// Extended Network expression
extended_network_expr = { 
    (
        input_spec |
        layer_expr |
        block_expr |
        component_ref |
        ui_expr |
        threed_expr |
        event_handler |
        data_binding
    ) ~ 
    (data_flow ~ extended_network_expr)? 
}

// Network expression (backward compatibility)
network_expr = { extended_network_expr }

// Network definition - main entry point
network_def = { 
    network_decl ~ network_components? ~ 
    extended_network_expr? ~
    (component_def | loss_expr)*
}

// Main entry point
main = { SOI ~ network_def ~ EOI }